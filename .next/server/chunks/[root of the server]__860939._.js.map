{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Dell/Desktop/studentinfosystem/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nexport const connectMongoDB = async () => {\r\n    try {\r\n        await mongoose.connect(process.env.MONGODB_URI);\r\n        console.log(\"Connected to MongoDB\");\r\n    } catch (error) {\r\n        console.log(\"Error connecting to MongoDB: \", error);\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,iBAAiB;IAC1B,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;QAC9C,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,iCAAiC;IACjD;AACJ"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Dell/Desktop/studentinfosystem/models/user.js"],"sourcesContent":["import mongoose, { Schema, models } from \"mongoose\";\r\n\r\nconst userSchema = new Schema({\r\n    name: {\r\n        type: String,\r\n        required: true, \r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n}, \r\n    { timestamps: true }\r\n);\r\n\r\nconst User = models.User || mongoose.model(\"User\", userSchema);\r\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC1B,MAAM;QACF,MAAM;QACN,UAAU;IACd;IACA,OAAO;QACH,MAAM;QACN,UAAU;IACd;IACA,UAAU;QACN,MAAM;QACN,UAAU;IACd;AACJ,GACI;IAAE,YAAY;AAAK;AAGvB,MAAM,OAAO,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCACpC"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Dell/Desktop/studentinfosystem/app/api/register/route.js"],"sourcesContent":["import { connectMongoDB } from \"@/lib/mongodb\";\r\nimport User from \"@/models/user\";\r\nimport { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(req) {\r\n    try {\r\n        const {name, email, password} = await req.json();\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        await connectMongoDB();\r\n        await User.create({ name, email, password: hashedPassword }); \r\n        \r\n        return NextResponse.json({message: \"User is registered.\"}, { status:201 }); \r\n    } catch (error) {\r\n        return NextResponse.json({message: \"There was an error while registering the user.\"}, { status:500 });\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAG;IAC1B,IAAI;QACA,MAAM,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAC,GAAG,MAAM,IAAI,IAAI;QAC9C,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,CAAA,GAAA,gHAAA,CAAA,iBAAc,AAAD;QACnB,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YAAE;YAAM;YAAO,UAAU;QAAe;QAE1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAqB,GAAG;YAAE,QAAO;QAAI;IAC5E,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAgD,GAAG;YAAE,QAAO;QAAI;IACvG;AACJ"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}